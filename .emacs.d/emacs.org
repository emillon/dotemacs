* Load paths

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
#+end_src

* General configuration

#+begin_src emacs-lisp
  (setq font-lock-maximum-decoration t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (blink-cursor-mode 0)
  (show-paren-mode)
  (setq inhibit-startup-screen t)
  (setq show-paren-mode t)
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  (setq custom-file "~/.emacs-custom.el")
  (load custom-file)
  (set-cursor-color "#ffffff")
  (setq split-height-threshold nil) ; Always split vertically
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "sensible-browser"
        )
#+end_src

* Conditional loading

#+begin_src emacs-lisp
  (defmacro require-maybe (feature &optional file)
    "*Try to require FEATURE, but don't signal an error if `require' fails."
    `(require ,feature ,file 'noerror))

  (defmacro when-available (func foo)
    "*Do something if FUNCTION is available."
    `(when (fboundp ,func) ,foo))
#+end_src

* el-get

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  (unless (require 'el-get nil 'noerror)
      (with-current-buffer
              (url-retrieve-synchronously
                       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
                  (goto-char (point-max))
                      (eval-print-last-sexp)))

  (el-get 'sync)

  (setq el-get-sources
        '(el-get
          (:name undo-tree :type builtin)
          evil
          )
        )
#+end_src

* evil

#+begin_src emacs-lisp
(require 'evil)
(evil-mode 1)
#+end_src

* ERC

#+begin_src emacs-lisp
  (require 'erc)
  (require 'tls)
  (setq erc-modules '(autojoin button completion fill irccontrols keep-place list
                      log match menu move-to-prompt netsplit networks noncommands
                      readonly ring services smiley stamp track))
  (setq erc-log-channels-directory "~/.erc/logs/")
  (setq erc-save-buffer-on-part t)
  (setq erc-auto-query 'window-noselect)
#+end_src

* gnugo

#+begin_src emacs-lisp
  (when (require-maybe 'gnugo)
    (require-maybe 'gnugo-xpms)
    )
#+end_src

* Color theme

#+begin_src emacs-lisp
  (when (require-maybe 'color-theme)
    (require 'color-theme-molokai)
    (color-theme-molokai)
    )
#+end_src

* Org-mode

#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/org-mode/lisp")
  (require 'org-notmuch)
  (require 'org-contacts)
  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                 "Jeudi" "Vendredi" "Samedi"]
        calendar-month-name-array ["Janvier"   "Février" "Mars"     "Avril"
                                   "Mai"       "Juin"    "Juillet"  "Août"
                                   "Septembre" "Octobre" "Novembre" "Décembre"]
        org-agenda-files '("~/org/")
        org-directory "~/org"
        org-default-notes-file (concat org-directory "/notes.org")
        )
  (define-key global-map "\C-cr" 'org-capture)
#+end_src

** Custom links

#+begin_src emacs-lisp
  ; [[bts:bugno]]
  (org-add-link-type "bts" 'org-bts-open)
  (defun org-bts-open (bug)
    (browse-url (concat "http://bugs.debian.org/" bug))
    )
  ; [[discogs:relno]]
  (org-add-link-type "discogs" 'org-discogs-open)
  (defun org-discogs-open (relno)
    (browse-url (concat "http://www.discogs.com/release/" relno))
    )
#+end_src

** Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src

** Habit tracking
#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(!)" "|" "DONE(!)")))
  (add-to-list 'org-modules 'org-habit)
  (require 'org-habit)
#+end_src
* Magit

#+begin_src emacs-lisp
  (define-key global-map "\C-cg" 'magit-status)
#+end_src
